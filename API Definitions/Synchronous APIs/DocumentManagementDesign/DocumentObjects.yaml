openapi: 3.0.3
info:
  title: Document Management
  description: |
    Document Management API defined as consumer to upload and download documents
    - Create document with post
    - Download particular document with get
    - Update particular document with put
    - optional: Get all documents
    - optional: Delete a particular document
    
    A document to be created contains
    - a title min. 2 characters, max. 50 characters
    - a file name
    - the binary of the document
    - a creation user
    
    Additionally to that, a document already in the system contains
    - an identifier
    - a creation and updating date
    - an updating user
    
    - optional a query to the document array can be given

  version: 1.0.0
servers:
  # Servers should be given - even though the real servers don't exist yet
  - url: 'https://apis.mycompany.com/document-management/'
  - url: 'https://test-apis.mycompany.com/document-management/'
  - url: 'https://dev-apis.mycompany.com/document-management/'
paths:
  ########################optional##################################
  # Multiple documents should get a plural
  /documents:
    get:
      description: Delivers back all existing documents
      operationId: getAllDocuments
      parameters:
        - $ref: '#/components/parameters/DocumentName'
        - $ref: '#/components/parameters/Title'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                items:
                  $ref: '#/components/schemas/Document'
  ########################end########################################

  # Single documents get a singular
  /document:
    post:
      description: Creates a new document in the system
      operationId: createDocument
      requestBody:
        $ref: '#/components/requestBodies/DocumentToBeCreated'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reference'

  # Particular documents are accessed with an id
  /document/{id}:
    get:
      description: Gives back a document by its ID
      operationId: getDocumentById
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'

    put:
      description: Changes a document given by its ID
      operationId: updateDocumentById
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        $ref: '#/components/requestBodies/DocumentToBeUpdated'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reference'

    #####################optional#################################
    delete:
      description: Deletes an existing document
      operationId: deleteDocumentById
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: Successful operation
    #######################end####################################



components:

  parameters:
    #####################optional#################################
    DocumentName:
      name: documentName
      in: query
      required: false
      description: |
        Document name of the document as search parameter, tailing white spaces are added by the implementation
      schema:
        type: string
        pattern: ^\w+.{0,4}$
        example: MyDocu
    #######################end####################################

    Id:
      name: id
      in: path
      required: true
      description: Identifier of the object to be accessed
      schema:
        type: string
        format: uuid
        example: 239a2c52-e66c-40d1-bf7f-f61097c49703

    #####################optional#################################
    Title:
      name: title
      in: query
      required: false
      description: Title of the document as search parameter, tailing white spaces are added by the implementation
      schema:
        type: string
        # Regex can limit input parameters to characters in the beginning
        # and to characters and numbers tailing
        # min length should be 1 (white space is added by application) maximum length should be 50
        # That should match the definition of the title in the object as well
        pattern: ^[A-Za-z]{1}[A-Za-z0-9\s]{0,49}$
        example: My Docu
    #######################end####################################


  requestBodies:
    DocumentToBeCreated:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DocumentToBeCreated'

    DocumentToBeUpdated:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Document'

  schemas:
    # It is good practice to order the definitions alphabetical
    # so, it is easier to find in the structure

    Document:
      description: A document with ID
      type: object
      # Document should contain (inherit) from Document to Be Created
      # That can be expressed by allOf https://swagger.io/docs/specification/data-models/oneof-anyof-allof-not/
      allOf:
        - $ref: '#/components/schemas/DocumentToBeCreated'
      required:
        - self
      properties:
        self:
          description: Self identification of a document
          type: string
          format: uuid
          example: 239a2c52-e66c-40d1-bf7f-f61097c49703
        createdAt:
          description: Time when document has been created
          type: string
          # see https://swagger.io/docs/specification/data-models/data-types/#string
          format: date-time
          example: 2024-01-03T12:56T+01:00
        updatedAt:
          description: Update time of the document
          type: string
          format: date-time
          example: 2024-01-03T23:56T+01:00
        updatedBy:
          $ref: '#/components/schemas/Reference'

    DocumentToBeCreated:
      description: Document to be created in the system
      type: object
      required:
        - title
        - document
      properties:
        title:
          description: Title of the document - it is used to show the document in the UI
          type: string
          # Min length with min and max changed to pattern
          pattern: ^[A-Za-z]{1}[A-Za-z0-9\s]{0,49}$
          example: My Document
        fileName:
          description: File name of the document
          type: string
          # Patterns can be given to string properties as Regular Expressions to ensure syntax correctness
          # Allowed is file endings docx, pdf, pptx, and exec
          # Regex can be tested https://regexr.com/3dm8n
          pattern: ^\w+.(docx|pdf|pptx|exec)$
          example: My_Document.docx
        document:
          description: Binary of the according document
          type: string
          # for format of strings for files see https://swagger.io/docs/specification/data-models/data-types/#string
          format: binary
        createdBy:
          # creation user can be given as reference
          # Use just a reference to a user - could be enhanced later e.g. by name and given name in case it is needed
          $ref: '#/components/schemas/Reference'

    Reference:
      description: A reference to an business object e.g. a document
      type: object
      required:
        - id
        - url
      properties:
        id:
          description: Unique identifier of the object
          type: string
          format: uuid
          example: 239a2c52-e66c-40d1-bf7f-f61097c49703
        url:
          description: Link to the according business object
          type: string
          format: uri
          example: https://apis.mycompany.com/document/239a2c52-e66c-40d1-bf7f-f61097c49703

  
