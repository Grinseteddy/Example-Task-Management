openapi: 3.0.3
info:
  title: Document Management
  description: |
    Document Management API defined as consumer to upload and download documents
    - Create document with post
    - Download particular document with get
    - Update particular document with put
    - optional: Get all documents
    - optional: Delete a particular document
    
    A document to be created contains
    - a title min. 2 characters, max. 50 characters
    - a file name
    - the binary of the document
    - a creation user
    
    Additionally to that, a document already in the system contains
    - an identifier
    - a creation and updating date
    - an updating user
    
    - optional a query to the document array can be given
    
    Errors needed:
    
    - post
      - 400 Bad request 
      - 406 title, document name already exist
    
    - put
      - 400 Bad request
      - 404 Document not found
      - 406 Document not accepted
    
    - get by id
      - 400 Bad request
      - 404 Document not found
    
    - get by query
      - 400 Bad request
      Found array can be empty - therefore 404 is not valid here
    
    - delete
      - 400 Bad request
      - 404 Not found

  version: 1.0.0
servers:
  - url: 'https://apis.mycompany.com/document-management/'
  - url: 'https://test-apis.mycompany.com/document-management/'
  - url: 'https://dev-apis.mycompany.com/document-management/'

tags:
  # Tags are used to structure the endpoints, so they can be easier be listed e.g. in an HTML
  # document. Endpoints can get multiple endpoints.
  - name: Get document(s)
    description: All endpoints where you can get documents
  - name: Manipulate document(s)
    description: All endpoints which allow to manipulate documents
  - name: Dangerous operation
    description: All endpoints which might include dangerous changes like changing the title
paths:

  /documents:
    get:
      description: Delivers back all existing documents
      operationId: getAllDocuments
      tags:
        - Get document(s)
      parameters:
        - $ref: '#/components/parameters/DocumentName'
        - $ref: '#/components/parameters/Title'

      # Responses can be defined in responses in the components,
      # Especially for the error message it is valid because, they are needed several times
      # The successful operations are refactored
      responses:
        200:
          $ref: '#/components/responses/DocumentList'
        400:
          $ref: '#/components/responses/BadRequest'

  /document:
    post:
      description: Creates a new document in the system
      operationId: createDocument
      tags:
        - Manipulate document(s)
      requestBody:
        $ref: '#/components/requestBodies/DocumentToBeCreated'
      responses:
        200:
          $ref: '#/components/schemas/Reference'
        400:
          $ref: '#/components/responses/BadRequest'
        406:
          $ref: '#/components/responses/DocumentNotAccepted'

  /document/{id}:
    get:
      description: Gives back a document by its ID
      operationId: getDocumentById
      tags:
        - Get document(s)
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          $ref: '#/components/responses/SingleDocument'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/DocumentNotFound'

    put:
      description: Changes a document given by its ID
      operationId: updateDocumentById
      tags:
        - Manipulate document(s)
        - Dangerous operation
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        $ref: '#/components/requestBodies/DocumentToBeUpdated'
      responses:
        200:
          $ref: '#/components/responses/DocumentReference'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/DocumentNotFound'
        406:
          $ref: '#/components/responses/DocumentNotAccepted'

    delete:
      description: Deletes an existing document
      operationId: deleteDocumentById
      tags:
        - Dangerous operation
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: Successful operation
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/DocumentNotFound'

components:

  parameters:
    #####################optional#################################
    DocumentName:
      name: documentName
      in: query
      required: false
      description: |
        Document name of the document as search parameter, tailing white spaces are added by the implementation
      schema:
        type: string
        pattern: ^\w+.{0,4}$
        example: MyDocu
    #######################end####################################

    Id:
      name: id
      in: path
      required: true
      description: Identifier of the object to be accessed
      schema:
        type: string
        format: uuid
        example: 239a2c52-e66c-40d1-bf7f-f61097c49703

    #####################optional#################################
    Title:
      name: title
      in: query
      required: false
      description: Title of the document as search parameter, tailing white spaces are added by the implementation
      schema:
        type: string
        pattern: ^[A-Za-z]{1}[A-Za-z0-9\s]{0,49}$
        example: My Docu
    #######################end####################################


  requestBodies:
    DocumentToBeCreated:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DocumentToBeCreated'

    DocumentToBeUpdated:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Document'

  responses:

    BadRequest:
      description: Bad request
      content:
        application/json:
        # A bad request can have several reasons; therefore, several messages should be allowed
          schema:
            type: array
            minItems: 1
            items:
              $ref: '#/components/schemas/Message'

# The structure of DocumentNotFound and DocumentNotAccepted are the same,
# so we could use the same response, but in the sense of more understandability,
# it is nice two define two response types.

    DocumentNotFound:
      description: Document not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'

    DocumentNotAccepted:
      description: Document request could not be accepted
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'


    DocumentList:
      description: Successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Document'

    DocumentReference:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Reference'

    SingleDocument:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Document'


  schemas:
    # It is good practice to order the definitions alphabetical
    # so, it is easier to find in the structure

    Document:
      description: A document with ID
      type: object
      allOf:
        - $ref: '#/components/schemas/DocumentToBeCreated'
      required:
        - self
      properties:
        self:
          description: Self identification of a document
          type: string
          format: uuid
          example: 239a2c52-e66c-40d1-bf7f-f61097c49703
        createdAt:
          description: Time when document has been created
          type: string
          format: date-time
          example: 2024-01-03T12:56T+01:00
        updatedAt:
          description: Update time of the document
          type: string
          format: date-time
          example: 2024-01-03T23:56T+01:00
        updatedBy:
          $ref: '#/components/schemas/Reference'

    DocumentToBeCreated:
      description: Document to be created in the system
      type: object
      required:
        - title
        - document
      properties:
        title:
          description: Title of the document - it is used to show the document in the UI
          type: string
          pattern: ^[A-Za-z]{1}[A-Za-z0-9\s]{0,49}$
          example: My Document
        fileName:
          description: File name of the document
          type: string
          pattern: ^\w+.(docx|pdf|pptx|exec)$
          example: My_Document.docx
        document:
          description: Binary of the according document
          type: string
          format: binary
        createdBy:
          $ref: '#/components/schemas/Reference'

    Message:
      description: Message to indicate a result of an operation or an error
      type: object
      required:

      properties:
        self:
          description: Identifier of the according message - can be used to localize messages
          type: string
          format: uuid
          example: 65971d1b-d5d2-4850-adcd-a40ad8c60149
        title:
          description: Title of the message
          type: string
          minLength: 2
          maxLength: 2
          example:  Not successful operation
        detail:
          description: More detailed description of the message
          type: string
          minLength: 2
          maxLength: 2048
          example: Document couldn't be created please check your document name
        level:
          description: The level gives an indication about severeness of the message
          type: string
          # Strings can be further limited using enumeration
          # If a string can only contain determined entries, it should be limited by enumerators
          # It is good practice to give enumerators by SNAKE_CASES
          enum:
            - DEBUG
            - INFO
            - ERROR_NORMAL
            - ERROR_FATAL
          example: INFO
        # It would be great if a message catalog exists where the messages can be localized and
        # even be fine-tuned, e.g., for external users or user interfaces
        # In such a case, the according reference should be given as well


    Reference:
      description: A reference to an business object e.g. a document
      type: object
      required:
        - id
        - url
      properties:
        id:
          description: Unique identifier of the object
          type: string
          format: uuid
          example: 239a2c52-e66c-40d1-bf7f-f61097c49703
        url:
          description: Link to the according business object
          type: string
          format: uri
          example: https://apis.mycompany.com/document/239a2c52-e66c-40d1-bf7f-f61097c49703

  
